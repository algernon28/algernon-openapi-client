/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-df7582dfe7cda5bf12b0b05c137e574248cecd69
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PageBeanPriorityWithSequence;
import org.openapitools.client.model.PageBeanProjectDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A priority scheme with paginated priorities and projects.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T14:27:49.596452195Z[Etc/UTC]", comments = "Generator version: 7.8.0-SNAPSHOT")
public class PrioritySchemeWithPaginatedPrioritiesAndProjects {
  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_DEFAULT_PRIORITY_ID = "defaultPriorityId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRIORITY_ID)
  private String defaultPriorityId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITIES = "priorities";
  @SerializedName(SERIALIZED_NAME_PRIORITIES)
  private PageBeanPriorityWithSequence priorities;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private PageBeanProjectDetails projects;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public PrioritySchemeWithPaginatedPrioritiesAndProjects() {
  }

  public PrioritySchemeWithPaginatedPrioritiesAndProjects _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * Get _default
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects defaultPriorityId(String defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
    return this;
  }

  /**
   * The ID of the default issue priority.
   * @return defaultPriorityId
   */
  @javax.annotation.Nullable
  public String getDefaultPriorityId() {
    return defaultPriorityId;
  }

  public void setDefaultPriorityId(String defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the priority scheme
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the priority scheme.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the priority scheme
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects priorities(PageBeanPriorityWithSequence priorities) {
    this.priorities = priorities;
    return this;
  }

  /**
   * The paginated list of priorities.
   * @return priorities
   */
  @javax.annotation.Nullable
  public PageBeanPriorityWithSequence getPriorities() {
    return priorities;
  }

  public void setPriorities(PageBeanPriorityWithSequence priorities) {
    this.priorities = priorities;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects projects(PageBeanProjectDetails projects) {
    this.projects = projects;
    return this;
  }

  /**
   * The paginated list of projects.
   * @return projects
   */
  @javax.annotation.Nullable
  public PageBeanProjectDetails getProjects() {
    return projects;
  }

  public void setProjects(PageBeanProjectDetails projects) {
    this.projects = projects;
  }


  public PrioritySchemeWithPaginatedPrioritiesAndProjects self(String self) {
    this.self = self;
    return this;
  }

  /**
   * The URL of the priority scheme.
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PrioritySchemeWithPaginatedPrioritiesAndProjects instance itself
   */
  public PrioritySchemeWithPaginatedPrioritiesAndProjects putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrioritySchemeWithPaginatedPrioritiesAndProjects prioritySchemeWithPaginatedPrioritiesAndProjects = (PrioritySchemeWithPaginatedPrioritiesAndProjects) o;
    return Objects.equals(this._default, prioritySchemeWithPaginatedPrioritiesAndProjects._default) &&
        Objects.equals(this.defaultPriorityId, prioritySchemeWithPaginatedPrioritiesAndProjects.defaultPriorityId) &&
        Objects.equals(this.description, prioritySchemeWithPaginatedPrioritiesAndProjects.description) &&
        Objects.equals(this.id, prioritySchemeWithPaginatedPrioritiesAndProjects.id) &&
        Objects.equals(this.isDefault, prioritySchemeWithPaginatedPrioritiesAndProjects.isDefault) &&
        Objects.equals(this.name, prioritySchemeWithPaginatedPrioritiesAndProjects.name) &&
        Objects.equals(this.priorities, prioritySchemeWithPaginatedPrioritiesAndProjects.priorities) &&
        Objects.equals(this.projects, prioritySchemeWithPaginatedPrioritiesAndProjects.projects) &&
        Objects.equals(this.self, prioritySchemeWithPaginatedPrioritiesAndProjects.self)&&
        Objects.equals(this.additionalProperties, prioritySchemeWithPaginatedPrioritiesAndProjects.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_default, defaultPriorityId, description, id, isDefault, name, priorities, projects, self, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrioritySchemeWithPaginatedPrioritiesAndProjects {\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    defaultPriorityId: ").append(toIndentedString(defaultPriorityId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default");
    openapiFields.add("defaultPriorityId");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("isDefault");
    openapiFields.add("name");
    openapiFields.add("priorities");
    openapiFields.add("projects");
    openapiFields.add("self");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrioritySchemeWithPaginatedPrioritiesAndProjects
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrioritySchemeWithPaginatedPrioritiesAndProjects.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrioritySchemeWithPaginatedPrioritiesAndProjects is not found in the empty JSON string", PrioritySchemeWithPaginatedPrioritiesAndProjects.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrioritySchemeWithPaginatedPrioritiesAndProjects.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultPriorityId") != null && !jsonObj.get("defaultPriorityId").isJsonNull()) && !jsonObj.get("defaultPriorityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPriorityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPriorityId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `priorities`
      if (jsonObj.get("priorities") != null && !jsonObj.get("priorities").isJsonNull()) {
        PageBeanPriorityWithSequence.validateJsonElement(jsonObj.get("priorities"));
      }
      // validate the optional field `projects`
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull()) {
        PageBeanProjectDetails.validateJsonElement(jsonObj.get("projects"));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrioritySchemeWithPaginatedPrioritiesAndProjects.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrioritySchemeWithPaginatedPrioritiesAndProjects' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrioritySchemeWithPaginatedPrioritiesAndProjects> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrioritySchemeWithPaginatedPrioritiesAndProjects.class));

       return (TypeAdapter<T>) new TypeAdapter<PrioritySchemeWithPaginatedPrioritiesAndProjects>() {
           @Override
           public void write(JsonWriter out, PrioritySchemeWithPaginatedPrioritiesAndProjects value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PrioritySchemeWithPaginatedPrioritiesAndProjects read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PrioritySchemeWithPaginatedPrioritiesAndProjects instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrioritySchemeWithPaginatedPrioritiesAndProjects given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrioritySchemeWithPaginatedPrioritiesAndProjects
   * @throws IOException if the JSON string is invalid with respect to PrioritySchemeWithPaginatedPrioritiesAndProjects
   */
  public static PrioritySchemeWithPaginatedPrioritiesAndProjects fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrioritySchemeWithPaginatedPrioritiesAndProjects.class);
  }

  /**
   * Convert an instance of PrioritySchemeWithPaginatedPrioritiesAndProjects to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

