/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-df7582dfe7cda5bf12b0b05c137e574248cecd69
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PriorityMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PrioritySchemeChangesWithMappings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T14:27:49.596452195Z[Etc/UTC]", comments = "Generator version: 7.8.0-SNAPSHOT")
public class PrioritySchemeChangesWithMappings {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<Long> ids = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private List<PriorityMapping> mappings = new ArrayList<>();

  public PrioritySchemeChangesWithMappings() {
  }

  public PrioritySchemeChangesWithMappings ids(List<Long> ids) {
    this.ids = ids;
    return this;
  }

  public PrioritySchemeChangesWithMappings addIdsItem(Long idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

  /**
   * Affected entity ids.
   * @return ids
   */
  @javax.annotation.Nonnull
  public List<Long> getIds() {
    return ids;
  }

  public void setIds(List<Long> ids) {
    this.ids = ids;
  }


  public PrioritySchemeChangesWithMappings mappings(List<PriorityMapping> mappings) {
    this.mappings = mappings;
    return this;
  }

  public PrioritySchemeChangesWithMappings addMappingsItem(PriorityMapping mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

  /**
   * Instructions to migrate issues.
   * @return mappings
   */
  @javax.annotation.Nullable
  public List<PriorityMapping> getMappings() {
    return mappings;
  }

  public void setMappings(List<PriorityMapping> mappings) {
    this.mappings = mappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrioritySchemeChangesWithMappings prioritySchemeChangesWithMappings = (PrioritySchemeChangesWithMappings) o;
    return Objects.equals(this.ids, prioritySchemeChangesWithMappings.ids) &&
        Objects.equals(this.mappings, prioritySchemeChangesWithMappings.mappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, mappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrioritySchemeChangesWithMappings {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("mappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrioritySchemeChangesWithMappings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrioritySchemeChangesWithMappings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrioritySchemeChangesWithMappings is not found in the empty JSON string", PrioritySchemeChangesWithMappings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrioritySchemeChangesWithMappings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrioritySchemeChangesWithMappings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrioritySchemeChangesWithMappings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        JsonArray jsonArraymappings = jsonObj.getAsJsonArray("mappings");
        if (jsonArraymappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappings` to be an array in the JSON string but got `%s`", jsonObj.get("mappings").toString()));
          }

          // validate the optional field `mappings` (array)
          for (int i = 0; i < jsonArraymappings.size(); i++) {
            PriorityMapping.validateJsonElement(jsonArraymappings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrioritySchemeChangesWithMappings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrioritySchemeChangesWithMappings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrioritySchemeChangesWithMappings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrioritySchemeChangesWithMappings.class));

       return (TypeAdapter<T>) new TypeAdapter<PrioritySchemeChangesWithMappings>() {
           @Override
           public void write(JsonWriter out, PrioritySchemeChangesWithMappings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrioritySchemeChangesWithMappings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrioritySchemeChangesWithMappings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrioritySchemeChangesWithMappings
   * @throws IOException if the JSON string is invalid with respect to PrioritySchemeChangesWithMappings
   */
  public static PrioritySchemeChangesWithMappings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrioritySchemeChangesWithMappings.class);
  }

  /**
   * Convert an instance of PrioritySchemeChangesWithMappings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

