/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-df7582dfe7cda5bf12b0b05c137e574248cecd69
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ConditionGroupConfiguration;
import org.openapitools.client.model.WorkflowRuleConfiguration;
import org.openapitools.client.model.WorkflowStatusAndPort;
import org.openapitools.client.model.WorkflowTransitionLinks;
import org.openapitools.client.model.WorkflowTrigger;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The transitions of the workflow. Note that a transition can have either the deprecated &#x60;to&#x60;/&#x60;from&#x60; fields or the &#x60;toStatusReference&#x60;/&#x60;links&#x60; fields, but never both nor a combination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T14:27:49.596452195Z[Etc/UTC]", comments = "Generator version: 7.8.0-SNAPSHOT")
public class WorkflowTransitions {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<WorkflowRuleConfiguration> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private ConditionGroupConfiguration conditions;

  public static final String SERIALIZED_NAME_CUSTOM_ISSUE_EVENT_ID = "customIssueEventId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ISSUE_EVENT_ID)
  private String customIssueEventId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FROM = "from";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FROM)
  private List<WorkflowStatusAndPort> from = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<WorkflowTransitionLinks> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_TO = "to";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TO)
  private WorkflowStatusAndPort to;

  public static final String SERIALIZED_NAME_TO_STATUS_REFERENCE = "toStatusReference";
  @SerializedName(SERIALIZED_NAME_TO_STATUS_REFERENCE)
  private String toStatusReference;

  public static final String SERIALIZED_NAME_TRANSITION_SCREEN = "transitionScreen";
  @SerializedName(SERIALIZED_NAME_TRANSITION_SCREEN)
  private WorkflowRuleConfiguration transitionScreen;

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private List<WorkflowTrigger> triggers = new ArrayList<>();

  /**
   * The transition type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INITIAL("INITIAL"),
    
    GLOBAL("GLOBAL"),
    
    DIRECTED("DIRECTED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALIDATORS = "validators";
  @SerializedName(SERIALIZED_NAME_VALIDATORS)
  private List<WorkflowRuleConfiguration> validators = new ArrayList<>();

  public WorkflowTransitions() {
  }

  public WorkflowTransitions actions(List<WorkflowRuleConfiguration> actions) {
    this.actions = actions;
    return this;
  }

  public WorkflowTransitions addActionsItem(WorkflowRuleConfiguration actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * The post-functions of the transition.
   * @return actions
   */
  @javax.annotation.Nullable
  public List<WorkflowRuleConfiguration> getActions() {
    return actions;
  }

  public void setActions(List<WorkflowRuleConfiguration> actions) {
    this.actions = actions;
  }


  public WorkflowTransitions conditions(ConditionGroupConfiguration conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public ConditionGroupConfiguration getConditions() {
    return conditions;
  }

  public void setConditions(ConditionGroupConfiguration conditions) {
    this.conditions = conditions;
  }


  public WorkflowTransitions customIssueEventId(String customIssueEventId) {
    this.customIssueEventId = customIssueEventId;
    return this;
  }

  /**
   * The custom event ID of the transition.
   * @return customIssueEventId
   */
  @javax.annotation.Nullable
  public String getCustomIssueEventId() {
    return customIssueEventId;
  }

  public void setCustomIssueEventId(String customIssueEventId) {
    this.customIssueEventId = customIssueEventId;
  }


  public WorkflowTransitions description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the transition.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Deprecated
  public WorkflowTransitions from(List<WorkflowStatusAndPort> from) {
    this.from = from;
    return this;
  }

  public WorkflowTransitions addFromItem(WorkflowStatusAndPort fromItem) {
    if (this.from == null) {
      this.from = new ArrayList<>();
    }
    this.from.add(fromItem);
    return this;
  }

  /**
   * The statuses and ports that the transition can start from. This field is deprecated - use &#x60;toStatusReference&#x60;/&#x60;links&#x60; instead.
   * @return from
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<WorkflowStatusAndPort> getFrom() {
    return from;
  }

  @Deprecated
  public void setFrom(List<WorkflowStatusAndPort> from) {
    this.from = from;
  }


  public WorkflowTransitions id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the transition.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WorkflowTransitions links(List<WorkflowTransitionLinks> links) {
    this.links = links;
    return this;
  }

  public WorkflowTransitions addLinksItem(WorkflowTransitionLinks linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * The statuses the transition can start from, and the mapping of ports between the statuses.
   * @return links
   */
  @javax.annotation.Nullable
  public List<WorkflowTransitionLinks> getLinks() {
    return links;
  }

  public void setLinks(List<WorkflowTransitionLinks> links) {
    this.links = links;
  }


  public WorkflowTransitions name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the transition.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WorkflowTransitions properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public WorkflowTransitions putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The properties of the transition.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Deprecated
  public WorkflowTransitions to(WorkflowStatusAndPort to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public WorkflowStatusAndPort getTo() {
    return to;
  }

  @Deprecated
  public void setTo(WorkflowStatusAndPort to) {
    this.to = to;
  }


  public WorkflowTransitions toStatusReference(String toStatusReference) {
    this.toStatusReference = toStatusReference;
    return this;
  }

  /**
   * The status the transition goes to.
   * @return toStatusReference
   */
  @javax.annotation.Nullable
  public String getToStatusReference() {
    return toStatusReference;
  }

  public void setToStatusReference(String toStatusReference) {
    this.toStatusReference = toStatusReference;
  }


  public WorkflowTransitions transitionScreen(WorkflowRuleConfiguration transitionScreen) {
    this.transitionScreen = transitionScreen;
    return this;
  }

  /**
   * Get transitionScreen
   * @return transitionScreen
   */
  @javax.annotation.Nullable
  public WorkflowRuleConfiguration getTransitionScreen() {
    return transitionScreen;
  }

  public void setTransitionScreen(WorkflowRuleConfiguration transitionScreen) {
    this.transitionScreen = transitionScreen;
  }


  public WorkflowTransitions triggers(List<WorkflowTrigger> triggers) {
    this.triggers = triggers;
    return this;
  }

  public WorkflowTransitions addTriggersItem(WorkflowTrigger triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * The triggers of the transition.
   * @return triggers
   */
  @javax.annotation.Nullable
  public List<WorkflowTrigger> getTriggers() {
    return triggers;
  }

  public void setTriggers(List<WorkflowTrigger> triggers) {
    this.triggers = triggers;
  }


  public WorkflowTransitions type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The transition type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public WorkflowTransitions validators(List<WorkflowRuleConfiguration> validators) {
    this.validators = validators;
    return this;
  }

  public WorkflowTransitions addValidatorsItem(WorkflowRuleConfiguration validatorsItem) {
    if (this.validators == null) {
      this.validators = new ArrayList<>();
    }
    this.validators.add(validatorsItem);
    return this;
  }

  /**
   * The validators of the transition.
   * @return validators
   */
  @javax.annotation.Nullable
  public List<WorkflowRuleConfiguration> getValidators() {
    return validators;
  }

  public void setValidators(List<WorkflowRuleConfiguration> validators) {
    this.validators = validators;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowTransitions workflowTransitions = (WorkflowTransitions) o;
    return Objects.equals(this.actions, workflowTransitions.actions) &&
        Objects.equals(this.conditions, workflowTransitions.conditions) &&
        Objects.equals(this.customIssueEventId, workflowTransitions.customIssueEventId) &&
        Objects.equals(this.description, workflowTransitions.description) &&
        Objects.equals(this.from, workflowTransitions.from) &&
        Objects.equals(this.id, workflowTransitions.id) &&
        Objects.equals(this.links, workflowTransitions.links) &&
        Objects.equals(this.name, workflowTransitions.name) &&
        Objects.equals(this.properties, workflowTransitions.properties) &&
        Objects.equals(this.to, workflowTransitions.to) &&
        Objects.equals(this.toStatusReference, workflowTransitions.toStatusReference) &&
        Objects.equals(this.transitionScreen, workflowTransitions.transitionScreen) &&
        Objects.equals(this.triggers, workflowTransitions.triggers) &&
        Objects.equals(this.type, workflowTransitions.type) &&
        Objects.equals(this.validators, workflowTransitions.validators);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, conditions, customIssueEventId, description, from, id, links, name, properties, to, toStatusReference, transitionScreen, triggers, type, validators);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowTransitions {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    customIssueEventId: ").append(toIndentedString(customIssueEventId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    toStatusReference: ").append(toIndentedString(toStatusReference)).append("\n");
    sb.append("    transitionScreen: ").append(toIndentedString(transitionScreen)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validators: ").append(toIndentedString(validators)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("conditions");
    openapiFields.add("customIssueEventId");
    openapiFields.add("description");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("links");
    openapiFields.add("name");
    openapiFields.add("properties");
    openapiFields.add("to");
    openapiFields.add("toStatusReference");
    openapiFields.add("transitionScreen");
    openapiFields.add("triggers");
    openapiFields.add("type");
    openapiFields.add("validators");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowTransitions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowTransitions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowTransitions is not found in the empty JSON string", WorkflowTransitions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowTransitions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowTransitions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            WorkflowRuleConfiguration.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        ConditionGroupConfiguration.validateJsonElement(jsonObj.get("conditions"));
      }
      if ((jsonObj.get("customIssueEventId") != null && !jsonObj.get("customIssueEventId").isJsonNull()) && !jsonObj.get("customIssueEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customIssueEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customIssueEventId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        JsonArray jsonArrayfrom = jsonObj.getAsJsonArray("from");
        if (jsonArrayfrom != null) {
          // ensure the json data is an array
          if (!jsonObj.get("from").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `from` to be an array in the JSON string but got `%s`", jsonObj.get("from").toString()));
          }

          // validate the optional field `from` (array)
          for (int i = 0; i < jsonArrayfrom.size(); i++) {
            WorkflowStatusAndPort.validateJsonElement(jsonArrayfrom.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            WorkflowTransitionLinks.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        WorkflowStatusAndPort.validateJsonElement(jsonObj.get("to"));
      }
      if ((jsonObj.get("toStatusReference") != null && !jsonObj.get("toStatusReference").isJsonNull()) && !jsonObj.get("toStatusReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toStatusReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toStatusReference").toString()));
      }
      // validate the optional field `transitionScreen`
      if (jsonObj.get("transitionScreen") != null && !jsonObj.get("transitionScreen").isJsonNull()) {
        WorkflowRuleConfiguration.validateJsonElement(jsonObj.get("transitionScreen"));
      }
      if (jsonObj.get("triggers") != null && !jsonObj.get("triggers").isJsonNull()) {
        JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("triggers");
        if (jsonArraytriggers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggers` to be an array in the JSON string but got `%s`", jsonObj.get("triggers").toString()));
          }

          // validate the optional field `triggers` (array)
          for (int i = 0; i < jsonArraytriggers.size(); i++) {
            WorkflowTrigger.validateJsonElement(jsonArraytriggers.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("validators") != null && !jsonObj.get("validators").isJsonNull()) {
        JsonArray jsonArrayvalidators = jsonObj.getAsJsonArray("validators");
        if (jsonArrayvalidators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validators` to be an array in the JSON string but got `%s`", jsonObj.get("validators").toString()));
          }

          // validate the optional field `validators` (array)
          for (int i = 0; i < jsonArrayvalidators.size(); i++) {
            WorkflowRuleConfiguration.validateJsonElement(jsonArrayvalidators.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowTransitions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowTransitions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowTransitions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowTransitions.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowTransitions>() {
           @Override
           public void write(JsonWriter out, WorkflowTransitions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowTransitions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowTransitions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowTransitions
   * @throws IOException if the JSON string is invalid with respect to WorkflowTransitions
   */
  public static WorkflowTransitions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowTransitions.class);
  }

  /**
   * Convert an instance of WorkflowTransitions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

